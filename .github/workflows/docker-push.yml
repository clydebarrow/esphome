---
name: Push docker images

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  init:
    name: Initialize build
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      branch_build: ${{ steps.tag.outputs.branch_build }}
    steps:
      - uses: actions/checkout@v4.1.7
      - name: Get tag
        id: tag
        # yamllint disable rule:line-length
        run: |
          TAG=$(cat esphome/const.py | sed -n -E "s/^__version__\s+=\s+\"(.+)\"$/\1/p")
          today="$(date --utc '+%Y%m%d')"
          TAG="${TAG}${today}"
          BRANCH=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH" != "dev" ]]; then
            TAG="${TAG}-${BRANCH}"
            BRANCH_BUILD="true"
          else
            BRANCH_BUILD="false"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "branch_build=${BRANCH_BUILD}" >> $GITHUB_OUTPUT
        # yamllint enable rule:line-length

  deploy-docker:
    name: Build ESPHome ${{ matrix.platform }}
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs: [init]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v7
          - linux/arm64
    steps:
      - uses: actions/checkout@v4.1.7
      - name: Set up Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: "3.9"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.6.1
      - name: Set up QEMU
        if: matrix.platform != 'linux/amd64'
        uses: docker/setup-qemu-action@v3.2.0

      - name: Log in to the GitHub container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build docker
        uses: ./.github/actions/build-image
        with:
          platform: ${{ matrix.platform }}
          target: docker
          baseimg: docker
          suffix: ""
          version: ${{ needs.init.outputs.tag }}

      - name: Build ha-addon
        uses: ./.github/actions/build-image
        with:
          platform: ${{ matrix.platform }}
          target: hassio
          baseimg: hassio
          suffix: "hassio"
          version: ${{ needs.init.outputs.tag }}

      - name: Build lint
        uses: ./.github/actions/build-image
        with:
          platform: ${{ matrix.platform }}
          target: lint
          baseimg: docker
          suffix: lint
          version: ${{ needs.init.outputs.tag }}

      - name: Sanitize platform name
        id: sanitize
        run: |
          echo "${{ matrix.platform }}" | sed 's|/|-|g' > /tmp/platform
          echo name=$(cat /tmp/platform) >> $GITHUB_OUTPUT

      - name: Upload digests
        uses: actions/upload-artifact@v4.4.0
        with:
          name: digests-${{ steps.sanitize.outputs.name }}
          path: /tmp/digests
          retention-days: 1

  deploy-manifest:
    name: Publish ESPHome ${{ matrix.image.title }} to ${{ matrix.registry }}
    runs-on: ubuntu-latest
    needs:
      - init
      - deploy-docker
    if: github.repository == 'clydebarrow/esphome'
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        image:
          - title: "ha-addon"
            target: "hassio"
            suffix: "hassio"
          - title: "docker"
            target: "docker"
            suffix: ""
          - title: "lint"
            target: "lint"
            suffix: "lint"
        registry:
          - ghcr
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Download digests
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: digests-*
          path: /tmp/digests
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Log in to the GitHub container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate short tags
        id: tags
        run: |
          output=$(docker/generate_tags.py \
            --tag "${{ needs.init.outputs.tag }}" \
            --suffix "${{ matrix.image.suffix }}" \
            --registry "${{ matrix.registry }}")
          echo $output
          for l in $output; do
            echo $l >> $GITHUB_OUTPUT
          done

      - name: Create manifest list and push
        working-directory: /tmp/digests/${{ matrix.image.target }}/${{ matrix.registry }}
        run: |
          docker buildx imagetools create $(jq -Rcnr 'inputs | . / "," | map("-t " + .) | join(" ")' <<< "${{ steps.tags.outputs.tags}}") \
            $(printf '${{ steps.tags.outputs.image }}@sha256:%s ' *)

